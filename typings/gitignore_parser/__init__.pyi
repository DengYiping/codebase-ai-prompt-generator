"""
This type stub file was generated by pyright.
"""

import collections
from pathlib import Path
from typing import Reversible

def handle_negation(file_path, rules: Reversible[IgnoreRule]):  # -> bool:
    ...

def parse_gitignore(full_path, base_dir=...):  # -> Callable[..., bool]:
    ...

def rule_from_pattern(pattern, base_path=..., source=...):  # -> IgnoreRule | None:
    """
    Take a .gitignore match pattern, such as "*.py[cod]" or "**/*.bak",
    and return an IgnoreRule suitable for matching against files and
    directories. Patterns which do not match files, such as comments
    and blank lines, will return None.
    Because git allows for nested .gitignore files, a base_path value
    is required for correct behavior. The base path should be absolute.
    """
    ...

IGNORE_RULE_FIELDS = ...
class IgnoreRule(collections.namedtuple('IgnoreRule_', IGNORE_RULE_FIELDS)):
    def __str__(self) -> str:
        ...

    def __repr__(self):  # -> LiteralString:
        ...

    def match(self, abs_path: str | Path):  # -> bool:
        ...

def fnmatch_pathname_to_regex(pattern, directory_only: bool, negation: bool, anchored: bool = ...):  # -> LiteralString:
    """
    Implements fnmatch style-behavior, as though with FNM_PATHNAME flagged;
    the path separator will not match shell-style '*' and '.' wildcards.
    """
    ...
